{"/home/travis/build/npmtest/node-npmtest-gulp-iconify/test.js":"/* istanbul instrument in package npmtest_gulp_iconify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-iconify/lib.npmtest_gulp_iconify.js":"/* istanbul instrument in package npmtest_gulp_iconify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_iconify = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_iconify = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-iconify/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-iconify && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_iconify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_iconify\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_iconify.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gulp_iconify.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_iconify.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gulp_iconify.__dirname + '/lib.npmtest_gulp_iconify.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-iconify/node_modules/gulp-iconify/index.js":"var gulp    = require('gulp');\nvar iconify = require('./lib/iconify');\nvar del     = require('del');\nvar svg2png = require('gulp-svg2png');\nvar sass    = require('./lib/custom-gulp-sass');\nvar gutil   = require('gulp-util');\nvar path    = require('path');\nvar fs      = require('fs');\n\nfunction getErrors(opts) {\n    var error = {};\n\n    if(!opts.src) {\n        error.src = \"Error: src not defined; please specify your source (src: './img/icons/*.svg').\";\n    }\n\n    if(Object.keys(error).length) {\n        Object.keys(error).forEach(function(k) {\n            gutil.log(error[k]);\n        });\n\n        process.exit();\n    }\n}\n\nfunction setFallbacks(opts) {\n    var warning = {};\n\n    if(!opts.pngOutput) {\n        opts.pngOutput = path.dirname(opts.src)+'/png';\n        warning.pngOutput = \"Info: No pngOutput folder defined. Using fallback (\"+opts.pngOutput+\").\";\n    }\n\n    if(opts.cssOutput === undefined) {\n        opts.cssOutput = './css';\n        warning.cssOutput = \"Info: No cssOutput folder defined. Using fallback (\"+opts.cssOutput+\").\";\n    } else if (opts.cssOutput === false) {\n        opts.cssDisabled = true;\n        warning.cssOutput = \"Info: CSS generation has been disabled. CSS files will not be saved.\";\n    }\n\n    if(!opts.scssOutput) {\n        opts.scssOutput = './scss';\n        opts.scssDisabled = true;\n\n        // check if \"./scss\" exists, if not: remember to remove the folder lateron.\n        fs.stat(path.normalize(opts.scssOutput), function (err) {\n            if (err) {\n                // File doesn't exist - remove scss folder on finish.\n                opts.scssRemoveDir = true;\n            }\n        });\n\n        warning.scssOutput = \"Info: No scssOutput folder defined. SCSS files will not be saved (temporary files will be saved to '/scss').\";\n    }\n\n    if(!opts.styleTemplate) {\n        opts.styleTemplate = path.join(__dirname, 'lib/output.mustache');\n        warning.styleTemplate = \"Info: No styleTemplate defined. Using default template.\";\n    }\n\n    if(!opts.svgoOptions) {\n        opts.svgoOptions = { enabled: true };\n        warning.svgoOptions = \"Info: No SVGO options defined, enabling SVGO by default.\";\n    }\n\n    if(!opts.svg2pngOptions) {\n        opts.svg2pngOptions = {\n            options: {},\n            verbose: false,\n            concurrency: 8\n        };\n        warning.svg2pngOptions = \"Info: No svg2png options defined. Using default settings.\";\n    }\n\n    if(!opts.defaultWidth) {\n        opts.defaultWidth = \"300px\";\n        warning.defaultWidth = \"Info: No defaultWidth defined. Using fallback (\"+opts.defaultWidth+\") if SVG has no width.\";\n    }\n\n    if(!opts.defaultHeight) {\n        opts.defaultHeight = \"200px\";\n        warning.defaultHeight = \"Info: No defaultHeight defined. Using fallback (\"+opts.defaultHeight+\") if SVG has no height.\";\n    }\n\n    if(Object.keys(warning).length) {\n        Object.keys(warning).forEach(function(k) {\n            gutil.log(warning[k]);\n        });\n    }\n}\n\nmodule.exports = function(opts) {\n    opts = opts || {};\n    opts.scssDisabled = false;\n\n    getErrors(opts);\n    setFallbacks(opts);\n\n    gulp.task('iconify-clean', function(cb) {\n        del([opts.scssOutput+'/*icons.*.scss', opts.cssOutput+'/*icons.*.css', opts.pngOutput+'/*.png'], cb);\n    });\n\n    gulp.task('iconify-convert', ['iconify-clean'], function() {\n        gulp.src(opts.src)\n            .pipe(iconify({\n                styleTemplate: opts.styleTemplate,\n                styleName: '_icons.svg.scss',\n                svgoOptions: opts.svgoOptions,\n                defaultWidth: opts.defaultWidth,\n                defaultHeight: opts.defaultHeight\n            }))\n            .pipe(gulp.dest(opts.scssOutput));\n\n        var stream = gulp.src(opts.src)\n            .pipe(svg2png(opts.svg2pngOptions.options, opts.svg2pngOptions.verbose, opts.svg2pngOptions.concurrency))\n            .pipe(gulp.dest(opts.pngOutput))\n            .pipe(iconify({\n                styleTemplate: opts.styleTemplate,\n                styleName: '_icons.png.scss',\n                defaultWidth: opts.defaultWidth,\n                defaultHeight: opts.defaultHeight\n            }))\n            .pipe(gulp.dest(opts.scssOutput));\n\n        return stream;\n    });\n\n    gulp.task('iconify-fallback', ['iconify-clean', 'iconify-convert'], function() {\n        var stream = gulp.src(opts.pngOutput+'/*.png')\n            .pipe(iconify({\n                styleTemplate: opts.styleTemplate,\n                styleName: '_icons.fallback.scss',\n                noConvert: true,\n                cssOutputTarget: opts.cssOutput,\n                pngOutputTarget: opts.pngOutput\n            }))\n            .pipe(gulp.dest(opts.scssOutput));\n\n        return stream;\n    });\n\n    gulp.task('iconify-sass', ['iconify-convert', 'iconify-fallback'], function() {\n        if (opts.cssDisabled) {\n            return false;\n        }\n        var stream = gulp.src(opts.scssOutput+'/_icons.*.scss')\n            .pipe(sass({\n                outputStyle: 'compressed'\n            }))\n            .pipe(gulp.dest(opts.cssOutput));\n\n        return stream;\n    });\n\n    gulp.task('iconify', ['iconify-convert', 'iconify-fallback', 'iconify-sass'], function() {\n        // remove SCSS folder/files if SCSS output is disabled\n        if(opts.scssDisabled) {\n            if(opts.scssRemoveDir) {\n                del.sync([opts.scssOutput]);\n            } else {\n                del.sync([opts.scssOutput+'/_icons.*.scss']);\n            }\n        }\n    });\n\n    gulp.start('iconify');\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-iconify/node_modules/gulp-iconify/lib/iconify.js":"var fs       = require('fs');\nvar path     = require('path');\nvar mustache = require('mustache');\nvar through  = require('through');\nvar gutil    = require('gulp-util');\nvar imacss   = require('imacss');\nvar svgo     = require('svgo');\nvar dom      = require('xmldom');\n\nvar getDimensions = function (type, image) {\n    var dimensions = {};\n\n    if(type === 'svg') {\n        var doc = new dom.DOMParser().parseFromString(image.contents.toString('utf-8'));\n        dimensions.width = Math.round(doc.documentElement.getAttribute('width'));\n        dimensions.height = Math.round(doc.documentElement.getAttribute('height'));\n    } else {\n        var hexString = image.contents.toString(\"hex\");\n        var i = 16, l;\n\n        for( l = hexString.length; i < l; i++ ){\n            var d = hexString.slice(i, i+8);\n            if( d === \"49484452\" ){\n                i = i+8;\n                break;\n            }\n        }\n\n        dimensions.width = parseInt(hexString.slice(i, i+8).toString(16), 16);\n        i = i+8;\n        dimensions.height = parseInt(hexString.slice(i, i+8).toString(16), 16);\n    }\n\n    return dimensions;\n}\n\nimacss.partialtransform = function partialtransform (glob, css, opts) {\n    // imacss extra includes\n    var domain   = require('domain');\n    var through  = require('through2');\n    var pipeline = require('imacss/lib');\n    var pkg      = require('../package.json');\n\n    var execution = domain.create();\n    var transformation;\n\n    css = css || pkg.name;\n\n    execution.on('error', function (err) {\n        transformation.emit('error', err);\n    });\n\n    execution.run(function () {\n        function normalizeSVGs (image, enc, callback) {\n            var dim;\n\n            if(image.mime === 'image/svg+xml') {\n                if(typeof opts.svgoOptions !== 'undefined' && (typeof opts.svgoOptions.enabled === 'undefined' || opts.svgoOptions.enabled === true)) {\n                    if(typeof opts.svgoOptions.options === 'object') {\n                        var svg = new svgo(opts.svgoOptions.options);\n                    } else {\n                        var svg = new svgo();\n                    }\n\n                    svg.optimize(String(image.contents), function(result) {\n                        if (result.error) {\n                            gutil.log('Error: ' + result.error + ' [file: '+image.name+']');\n                        } else {\n                            image.contents = new Buffer(result.data);\n                        }\n                    });\n                }\n\n                image.datauri = 'data:'+image.mime+';charset=UTF-8,'+encodeURIComponent(image.contents.toString('utf-8'));\n                dim = getDimensions('svg', image);\n            } else {\n                dim = getDimensions('png', image);\n            }\n\n            image.width = String(dim.width || opts.defaultWidth).replace(/px/, \"\");\n            image.height = String(dim.height || opts.defaultHeight).replace(/px/, \"\");\n\n            this.push(image);\n            callback();\n        }\n\n        transformation = pipeline.createFileStream(glob)\n            .pipe(pipeline.purify())\n            .pipe(pipeline.slugify())\n            .pipe(pipeline.mimeify())\n            .pipe(pipeline.urify())\n            .pipe(through.obj(normalizeSVGs));\n    });\n\n    return transformation;\n};\n\nmodule.exports = function(opts) {\n    var tpl = fs.readFileSync(opts.styleTemplate).toString();\n\n    var buffer = [];\n    var noConvert = opts.noConvert;\n\n    var bufferContents = function(file) {\n        if(noConvert) {\n            buffer.push({\n                slug: file.relative.replace('.'+getExtension(file.relative), ''),\n                datauri: path.join(path.relative(opts.cssOutputTarget, opts.pngOutputTarget), file.relative)\n            });\n        } else {\n            imacss\n                .partialtransform(file, 'icon', opts)\n                .on('data', function (selector) {\n                    buffer.push(selector);\n                })\n                .once('error', this.emit.bind(this, 'error'));\n        }\n    };\n\n    var endStream = function() {\n        this.emit('data', new gutil.File({\n            contents: new Buffer(mustache.render(tpl, {\n                items: buffer\n            }), 'utf8'),\n            path: opts.styleName\n        }));\n        this.emit('end');\n    };\n\n    var getExtension = function (filename) {\n        var ext = path.extname(filename||'').split('.');\n        return ext[ext.length - 1];\n    };\n\n    return new through(bufferContents, endStream);\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-iconify/node_modules/gulp-iconify/lib/custom-gulp-sass.js":"'use strict';\n\nvar gutil          = require('gulp-util');\nvar through        = require('through2');\nvar assign         = require('object-assign');\nvar path           = require('path');\nvar applySourceMap = require('vinyl-sourcemaps-apply');\n\nvar PLUGIN_NAME = 'gulp-sass';\n\n//////////////////////////////\n// Main Gulp Sass function\n//////////////////////////////\nvar gulpSass = function gulpSass(options, sync) {\n    return through.obj(function(file, enc, cb) {\n        var opts,\n            filePush,\n            errorM,\n            callback,\n            result;\n\n        if (file.isNull()) {\n            return cb(null, file);\n        }\n        if (file.isStream()) {\n            return cb(new gutil.PluginError(PLUGIN_NAME, 'Streaming not supported'));\n        }\n        if (!file.contents.length) {\n            file.path = gutil.replaceExtension(file.path, '.css');\n            return cb(null, file);\n        }\n\n        opts = assign({}, options);\n        opts.data = file.contents.toString();\n\n        // Ensure `indentedSyntax` is true if a `.sass` file\n        if (path.extname(file.path) === '.sass') {\n            opts.indentedSyntax = true;\n        }\n\n        // Ensure file's parent directory in the include path\n        if (opts.includePaths) {\n            if (typeof opts.includePaths === 'string') {\n                opts.includePaths = [opts.includePaths];\n            }\n        }\n        else {\n            opts.includePaths = [];\n        }\n\n        opts.includePaths.unshift(path.dirname(file.path));\n\n        // Generate Source Maps if plugin source-map present\n        if (file.sourceMap) {\n            opts.sourceMap = file.path;\n            opts.omitSourceMapUrl = true;\n            opts.sourceMapContents = true;\n        }\n\n        //////////////////////////////\n        // Handles returning the file to the stream\n        //////////////////////////////\n        filePush = function filePush(sassObj) {\n            var sassMap,\n                sassMapFile,\n                sassFileSrc,\n                sassFileSrcPath,\n                sourceFileIndex,\n                filteredSources;\n\n            // Build Source Maps!\n            if (sassObj.map) {\n                // Transform map into JSON\n                sassMap = JSON.parse(sassObj.map.toString());\n                // Grab the stdout and transform it into stdin\n                sassMapFile = sassMap.file.replace('stdout', 'stdin');\n                // Grab the base file name that's being worked on\n                sassFileSrc = file.relative;\n                // Grab the path portion of the file that's being worked on\n                sassFileSrcPath = path.dirname(sassFileSrc);\n                if (sassFileSrcPath) {\n                    //Prepend the path to all files in the sources array except the file that's being worked on\n                    for (sourceFileIndex = 0; sourceFileIndex < sassMap.sources.length; sourceFileIndex++) {\n                        if (sourceFileIndex !== sassMap.sources.indexOf(sassMapFile)) {\n                            sassMap.sources[sourceFileIndex] = path.join(sassFileSrcPath, sassMap.sources[sourceFileIndex]);\n                        }\n                    }\n                }\n                // Remove 'stdin' from souces and replace with filenames!\n                filteredSources = sassMap.sources.filter(function(src) {\n                    if (src.indexOf('stdin') === -1) {\n                        return src;\n                    }\n                });\n                sassMap.sources = filteredSources;\n                sassMap.sources.unshift(sassFileSrc);\n                // Replace the map file with the original file name (but new extension)\n                sassMap.file = gutil.replaceExtension(sassFileSrc, '.css');\n                // Apply the map\n                applySourceMap(file, sassMap);\n            }\n\n            file.contents = sassObj.css;\n            file.path = gutil.replaceExtension(file.path, '.css');\n\n            var parts = file.path.split('/');\n            if(parts.length) {\n                parts[parts.length - 1] = parts[parts.length - 1].replace(/^_+/, '');\n                file.path = parts.join('/');\n            }\n\n            cb(null, file);\n        };\n\n        //////////////////////////////\n        // Handles error message\n        //////////////////////////////\n        errorM = function errorM(error) {\n            var relativePath = '',\n                filePath = error.file === 'stdin' ? file.path : error.file,\n                message = '';\n\n            filePath = filePath ? filePath : file.path;\n            relativePath = path.relative(process.cwd(), filePath);\n\n            message += gutil.colors.underline(relativePath) + '\\n';\n            message += error.formatted;\n\n            error.messageFormatted = message;\n            error.message = gutil.colors.stripColor(message);\n\n            return cb(new gutil.PluginError(\n                PLUGIN_NAME, error\n            ));\n        };\n\n        if (sync !== true) {\n            //////////////////////////////\n            // Async Sass render\n            //////////////////////////////\n            callback = function(error, obj) {\n                if (error) {\n                    return errorM(error);\n                }\n                filePush(obj);\n            };\n\n            gulpSass.compiler.render(opts, callback);\n        }\n        else {\n            //////////////////////////////\n            // Sync Sass render\n            //////////////////////////////\n            try {\n                result = gulpSass.compiler.renderSync(opts);\n\n                filePush(result);\n            }\n            catch (error) {\n                return errorM(error);\n            }\n        }\n    });\n};\n\n//////////////////////////////\n// Sync Sass render\n//////////////////////////////\ngulpSass.sync = function sync(options) {\n    return gulpSass(options, true);\n};\n\n//////////////////////////////\n// Log errors nicely\n//////////////////////////////\ngulpSass.logError = function logError(error) {\n    var message = new gutil.PluginError('sass', error.messageFormatted).toString();\n    process.stderr.write(message + '\\n');\n    this.emit('end');\n};\n\n//////////////////////////////\n// Store compiler in a prop\n//////////////////////////////\ngulpSass.compiler = require('node-sass');\n\nmodule.exports = gulpSass;"}